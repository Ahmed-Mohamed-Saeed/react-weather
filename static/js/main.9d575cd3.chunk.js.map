{"version":3,"sources":["components/funcTimeConvert.js","components/HourlyCard.jsx","components/Card.jsx","App.jsx","index.js"],"names":["timeConvert","time","toString","match","length","slice","join","HourlyCard","data","className","src","condition","icon","alt","temp_c","text","humidity","wind_kph","Card","cityData","hourlyCardsRef","useRef","widthHourlyCards","useEffect","current","offsetWidth","handleScrollButtons","direction","scrollLeft","location","name","region","last_updated","feelslike_c","precip_mm","pressure_mb","vis_km","onClick","ref","forecast","forecastday","hour","map","hourlyObj","index","App","useState","setCityData","cityInput","setcityInput","updateCityData","fetch","then","res","json","is_day","type","placeholder","onChange","e","target","value","onKeyPress","charCode","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d575cd3.chunk.js","sourcesContent":["export function timeConvert(time) {\n  // Check correct time format and split into components\n  time = time.toString().match(/^([01]\\d|2[0-3])(:)([0-5]\\d)(:[0-5]\\d)?$/) || [\n    time,\n  ];\n\n  if (time.length > 1) {\n    // If time format correct\n    time = time.slice(1); // Remove full string match value\n    time[5] = +time[0] < 12 ? \" AM\" : \" PM\"; // Set AM/PM\n    time[0] = +time[0] % 12 || 12; // Adjust hours\n  }\n  return time.join(\"\"); // return adjusted time or original string\n}\n","import React from \"react\";\nimport { timeConvert } from \"./funcTimeConvert\";\n\nconst HourlyCard = ({ data }) => {\n  return (\n    <div className=\"hourly-card\">\n      <div className=\"details\">\n        <img src={data.condition.icon} alt=\"\" />\n        <div className=\"temp xx-large-font\">{data.temp_c}°</div>\n        <div className=\"condition-text\">\n          {/* {data.condition.text === \"Light rain shower\" ||\n          data.condition.text === \"Patchy rain possible\" ||\n          data.condition.text === \"Patchy light rain\" ||\n          data.condition.text === \"Moderate rain at times\"\n            ? \"Light rain\"\n            : data.condition.text === \"Moderate or heavy rain shower\"\n            ? \"Rain showers\"\n            : data.condition.text === \"Torrential rain shower\"\n            ? \"Heavy rain\"\n            : data.condition.text === \"Patchy light rain with thunder\"\n            ? \"Rainy thunders\"\n            : data.condition.text} */}\n          {data.condition.text}\n        </div>\n        <div className=\"things\">\n          <div className=\"humidity small-font\">Humidity: {data.humidity}%</div>\n          <div className=\"wind-speed small-font\">\n            Wind Speed: {data.wind_kph} kph\n          </div>\n        </div>\n      </div>\n      <div className=\"time\">{timeConvert(data.time.slice(11))}</div>\n    </div>\n  );\n};\n\nexport default HourlyCard;\n","import React from \"react\";\nimport \"../styles/card.css\";\nimport HourlyCard from \"./HourlyCard\";\nimport { timeConvert } from \"./funcTimeConvert\";\nimport { useRef, useEffect } from \"react\";\n\nconst Card = ({ cityData }) => {\n  const hourlyCardsRef = useRef(null);\n\n  let widthHourlyCards = 0;\n  useEffect(() => {\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    widthHourlyCards = hourlyCardsRef.current.offsetWidth;\n  }, [cityData]);\n\n  const handleScrollButtons = (direction) => {\n    if (direction === \"left\") {\n      hourlyCardsRef.current.scrollLeft -= widthHourlyCards;\n    } else {\n      hourlyCardsRef.current.scrollLeft += widthHourlyCards;\n    }\n  };\n\n  return (\n    <div className=\"card\">\n      <div className=\"current\">\n        <div className=\"city-name x-large-font\">\n          {cityData.location.name}, {cityData.location.region}\n        </div>\n        <div className=\"temp\">\n          <img src={cityData.current.condition.icon} alt=\"condition-icon\" />\n          {cityData.current.temp_c}°\n        </div>\n        <div className=\"condition-text xx-large-font\">\n          {cityData.current.condition.text === \"Light rain shower\" ||\n          cityData.current.condition.text === \"Patchy rain possible\" ||\n          cityData.current.condition.text === \"Patchy light rain\"\n            ? \"Light rain\"\n            : cityData.current.condition.text ===\n              \"Moderate or heavy rain shower\"\n            ? \"Rain showers\"\n            : cityData.current.condition.text}\n        </div>\n        <div className=\"updated-on\">\n          Updated as of {timeConvert(cityData.current.last_updated.slice(11))}\n        </div>\n\n        <div className=\"faltu-cheeza\">\n          <div className=\"feels-like\">\n            Feels Like: {cityData.current.feelslike_c}°\n          </div>\n          <div className=\"humidity\">Humidity: {cityData.current.humidity}%</div>\n          <div className=\"precipitation\">\n            Precipitation: {cityData.current.precip_mm} mm\n          </div>\n          <div className=\"wind-speed\">\n            Wind Speed: {cityData.current.wind_kph} kph\n          </div>\n          <div className=\"pressure\">\n            Pressure: {cityData.current.pressure_mb} mb\n          </div>\n          <div className=\"visibility\">\n            Visibility: {cityData.current.vis_km} km\n          </div>\n        </div>\n      </div>\n      <h2>Hourly</h2>\n      <div className=\"hourly-update\">\n        <button onClick={() => handleScrollButtons(\"left\")}>{\"<\"}</button>\n        <div className=\"hourly-cards\" ref={hourlyCardsRef}>\n          {cityData.forecast.forecastday[0].hour.map((hourlyObj, index) => (\n            <HourlyCard data={hourlyObj} key={index} />\n          ))}\n        </div>\n        <button onClick={() => handleScrollButtons(\"right\")}>{\">\"}</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import \"./App.css\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport Card from \"./components/Card\";\n\nfunction App() {\n  const [cityData, setCityData] = useState(null);\n  const [cityInput, setcityInput] = useState(\"cairo\");\n\n  const updateCityData = () => {\n    setcityInput(\"\");\n\n    fetch(\n      `https://api.weatherapi.com/v1/forecast.json?key=6a8bb66a242f4e1889382727211608&q=${cityInput}`\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        setCityData(data);\n      });\n  };\n  useEffect(() => {\n    updateCityData();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (!cityData) {\n    return <div>loading</div>;\n  }\n  return cityData.location ? (\n    <div\n      className={\n        cityData.current.is_day\n          ? cityData.current.condition.text === \"Sunny\"\n            ? \"App day sunny\"\n            : cityData.current.condition.text === \"Partly cloudy\"\n            ? \"App day partially-cloudy\"\n            : cityData.current.condition.text === \"Cloudy\"\n            ? \"App day cloudy\"\n            : cityData.current.condition.text === \"Patchy light rain\" ||\n              cityData.current.condition.text ===\n                \"Moderate or heavy rain shower\" ||\n              cityData.current.condition.text === \"Moderate rain\" ||\n              cityData.current.condition.text === \"Patchy rain possible\" ||\n              cityData.current.condition.text === \"Light rain\" ||\n              cityData.current.condition.text === \"Moderate rain at times\" ||\n              cityData.current.condition.text ===\n                \"Moderate or heavy rain with thunder\"\n            ? \"App day rainy\"\n            : cityData.current.condition.text ===\n              \"Patchy light rain with thunder\"\n            ? \"App day thunder\"\n            : \"App day partially-cloudy\"\n          : cityData.current.condition.text === \"Partly cloudy\" ||\n            cityData.current.condition.text === \"Cloudy\"\n          ? \"App night cloudy\"\n          : cityData.current.condition.text === \"Patchy light rain\" ||\n            cityData.current.condition.text ===\n              \"Moderate or heavy rain shower\" ||\n            cityData.current.condition.text === \"Moderate rain\" ||\n            cityData.current.condition.text === \"Patchy rain possible\"\n          ? \"App night rainy\"\n          : \"App night\"\n      }\n    >\n      <div className=\"header\">\n        <input\n          type=\"text\"\n          placeholder=\"Search\"\n          onChange={(e) => setcityInput(e.target.value)}\n          value={cityInput}\n          onKeyPress={(e) => {\n            e.charCode === 13 ? updateCityData() : setcityInput(e.target.value);\n          }}\n        />\n      </div>\n      <Card cityData={cityData} />\n    </div>\n  ) : (\n    <h2>Place not found</h2>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}